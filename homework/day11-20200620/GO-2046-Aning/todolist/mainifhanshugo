package main

import (
	"database/sql"
	"fmt"
	"html/template"
	"log"
	"net/http"
	"time"

	_ "github.com/go-sql-driver/mysql"
)

const (
	dbDriver  = "mysql"
	dbUser    = "gostudy"
	dbPasswd  = "123456q!"
	dbName    = "gostudy"
	dbHost    = "120.79.60.117"
	dbPort    = 3306
	listenAdd = ":8989"
)

const (
	sqlTask = "select task.id,task.name,task.status,task.start_time,task.complete_time,task.deadline_time,user.name as user  from task left join user on task.user=user.id"
)

type Task struct {
	ID     int
	Name   string
	Status int
	// Status       string
	StartTime    *time.Time
	CompleteTime *time.Time
	DeadlineTime *time.Time
	User         *string
}

const (
	datatimeLayout = "2006-01-02 15:04:05"
)

var (
	statusMap = map[int]string{
		0: "新建",
		1: "正在进行",
		2: "暂停",
		3: "完成",
	}
)

func main() {
	dsn := fmt.Sprintf("%s:%s@tcp(%s:%d)/%s?charset=utf8mb4&parseTime=true&loc=PRC", dbUser, dbPasswd, dbHost, dbPort, dbName)
	db, err := sql.Open(dbDriver, dsn)

	if err != nil {
		log.Fatal(err)
	}
	if err := db.Ping(); err != nil {
		log.Fatal(err)
	}
	//显示
	http.HandleFunc("/", func(resp http.ResponseWriter, req *http.Request) {
		tasks := make([]Task, 0, 20)
		rows, err := db.Query(sqlTask)
		if err == nil {
			for rows.Next() {
				var task Task
				//				var status int转化  &task.Status
				err := rows.Scan(&task.ID, &task.Name, &task.Status, &task.StartTime, &task.CompleteTime, &task.DeadlineTime, &task.User)
				// task.Status = statusMap[status]
				if err == nil {
					tasks = append(tasks, task)
				} else {
					fmt.Println(err)
				}
			}
		}
		// fmt.Println(tasks)
		funcs := template.FuncMap{
			"datatime": func(t *time.Time) string {
				if t == nil {
					return "--"
				}
				return t.Format(datatimeLayout)
			},
			"status": func(status int) string {
				return statusMap[status]
			},
		}
		tmpl := template.Must(template.New("tpl").Funcs(funcs).ParseFiles("views/tasks.html"))
		tmpl.ExecuteTemplate(resp, "tasks.html", struct {
			Tasks []Task
		}{tasks})
	})
	http.ListenAndServe(listenAdd, nil)
}
